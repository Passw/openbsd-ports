Index: lld/ELF/Arch/X86_64.cpp
--- lld/ELF/Arch/X86_64.cpp.orig
+++ lld/ELF/Arch/X86_64.cpp
@@ -1319,7 +1319,7 @@ Retpoline::Retpoline(Ctx &ctx) : X86_64(ctx) {
 }
 
 void Retpoline::writeGotPlt(uint8_t *buf, const Symbol &s) const {
-  write64le(buf, s.getPltVA(ctx) + 17);
+  write64le(buf, s.getPltVA(ctx) + 21);
 }
 
 void Retpoline::writePltHeader(uint8_t *buf) const {
@@ -1347,22 +1347,23 @@ void Retpoline::writePltHeader(uint8_t *buf) const {
 void Retpoline::writePlt(uint8_t *buf, const Symbol &sym,
                          uint64_t pltEntryAddr) const {
   const uint8_t insn[] = {
-      0x4c, 0x8b, 0x1d, 0, 0, 0, 0, // 0:  mov foo@GOTPLT(%rip), %r11
-      0xe8, 0,    0,    0,    0,    // 7:  callq plt+0x20
-      0xe9, 0,    0,    0,    0,    // c:  jmp plt+0x12
-      0x68, 0,    0,    0,    0,    // 11: pushq <relocation index>
-      0xe9, 0,    0,    0,    0,    // 16: jmp plt+0
-      0xcc, 0xcc, 0xcc, 0xcc, 0xcc, // 1b: int3; padding
+      0xf3, 0x0f, 0x1e, 0xfa,       // 0:  endbr64
+      0x4c, 0x8b, 0x1d, 0, 0, 0, 0, // 4:  mov foo@GOTPLT(%rip), %r11
+      0xe8, 0,    0,    0,    0,    // b:  callq plt+0x20
+      0xe9, 0,    0,    0,    0,    // 10:  jmp plt+0x12
+      0x68, 0,    0,    0,    0,    // 15: pushq <relocation index>
+      0xe9, 0,    0,    0,    0,    // 1a: jmp plt+0
+      0xcc, 0xcc, 0xcc, 0xcc, 0xcc, // 1f: int3; padding
   };
   memcpy(buf, insn, sizeof(insn));
 
   uint64_t off = pltEntryAddr - ctx.in.plt->getVA();
 
-  write32le(buf + 3, sym.getGotPltVA(ctx) - pltEntryAddr - 7);
-  write32le(buf + 8, -off - 12 + 32);
-  write32le(buf + 13, -off - 17 + 18);
-  write32le(buf + 18, sym.getPltIdx(ctx));
-  write32le(buf + 23, -off - 27);
+  write32le(buf + 7, sym.getGotPltVA(ctx) - pltEntryAddr - 11);
+  write32le(buf + 12, -off - 16 + 32);
+  write32le(buf + 17, -off - 21 + 18);
+  write32le(buf + 22, sym.getPltIdx(ctx));
+  write32le(buf + 27, -off - 31);
 }
 
 RetpolineZNow::RetpolineZNow(Ctx &ctx) : X86_64(ctx) {
@@ -1390,14 +1391,15 @@ void RetpolineZNow::writePltHeader(uint8_t *buf) const
 void RetpolineZNow::writePlt(uint8_t *buf, const Symbol &sym,
                              uint64_t pltEntryAddr) const {
   const uint8_t insn[] = {
+      0xf3, 0x0f, 0x1e, 0xfa,          // endbr64
       0x4c, 0x8b, 0x1d, 0,    0, 0, 0, // mov foo@GOTPLT(%rip), %r11
       0xe9, 0,    0,    0,    0,       // jmp plt+0
       0xcc, 0xcc, 0xcc, 0xcc,          // int3; padding
   };
   memcpy(buf, insn, sizeof(insn));
 
-  write32le(buf + 3, sym.getGotPltVA(ctx) - pltEntryAddr - 7);
-  write32le(buf + 8, ctx.in.plt->getVA() - pltEntryAddr - 12);
+  write32le(buf + 7, sym.getGotPltVA(ctx) - pltEntryAddr - 11);
+  write32le(buf + 12, ctx.in.plt->getVA() - pltEntryAddr - 16);
 }
 
 void elf::setX86_64TargetInfo(Ctx &ctx) {
@@ -1409,8 +1411,12 @@ void elf::setX86_64TargetInfo(Ctx &ctx) {
     return;
   }
 
+#ifdef __OpenBSD__
+  ctx.target.reset(new IntelIBT(ctx));
+#else
   if (ctx.arg.andFeatures & GNU_PROPERTY_X86_FEATURE_1_IBT)
     ctx.target.reset(new IntelIBT(ctx));
   else
     ctx.target.reset(new X86_64(ctx));
+#endif
 }
