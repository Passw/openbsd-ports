Index: llvm/lib/Target/Mips/MipsFrameLowering.cpp
--- llvm/lib/Target/Mips/MipsFrameLowering.cpp.orig
+++ llvm/lib/Target/Mips/MipsFrameLowering.cpp
@@ -12,6 +12,7 @@
 
 #include "MipsFrameLowering.h"
 #include "MipsInstrInfo.h"
+#include "MipsReturnProtectorLowering.h"
 #include "MipsTargetMachine.h"
 #include "llvm/CodeGen/MachineFrameInfo.h"
 #include "llvm/CodeGen/MachineFunction.h"
@@ -116,6 +117,10 @@ uint64_t MipsFrameLowering::estimateStackSize(const Ma
     if (MFI.getObjectOffset(I) > 0)
       Size += MFI.getObjectSize(I);
 
+  // Account for saving return protector register
+  if (MFI.getReturnProtectorNeeded())
+    Size += TRI.getSpillSize(*TRI.getMinimalPhysRegClass(Mips::T9_64));
+
   // Conservatively assume all callee-saved registers will be saved.
   for (const MCPhysReg *R = TRI.getCalleeSavedRegs(&MF); *R; ++R) {
     unsigned RegSize = TRI.getSpillSize(*TRI.getMinimalPhysRegClass(*R));
@@ -142,4 +147,8 @@ eliminateCallFramePseudoInstr(MachineFunction &MF, Mac
   }
 
   return MBB.erase(I);
+}
+
+const ReturnProtectorLowering *MipsFrameLowering::getReturnProtector() const {
+  return &RPL;
 }
