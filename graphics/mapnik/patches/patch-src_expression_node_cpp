Unbreak with libc++19

from https://github.com/mapnik/mapnik/pull/4500

Index: src/expression_node.cpp
--- src/expression_node.cpp.orig
+++ src/expression_node.cpp
@@ -38,10 +38,10 @@ MAPNIK_DISABLE_WARNING_POP
 namespace mapnik {
 
 #if defined(BOOST_REGEX_HAS_ICU)
-static void fromUTF32toUTF8(std::basic_string<UChar32> const& src, std::string& dst)
+static void fromUTF32toUTF8(boost::u32regex const& src, std::string& dst)
 {
-    int32_t len = safe_cast<int32_t>(src.length());
-    value_unicode_string::fromUTF32(src.data(), len).toUTF8String(dst);
+    std::int32_t size = safe_cast<std::int32_t>(src.size());
+    value_unicode_string::fromUTF32(src.expression(), size).toUTF8String(dst);
 }
 #endif
 
@@ -106,7 +106,7 @@ std::string regex_match_node::to_string() const
     str_ += ".match('";
     auto const& pattern = impl_.get()->pattern_;
 #if defined(BOOST_REGEX_HAS_ICU)
-    fromUTF32toUTF8(pattern.str(), str_);
+    fromUTF32toUTF8(pattern, str_);
 #else
     str_ += pattern.str();
 #endif
@@ -151,7 +151,7 @@ std::string regex_replace_node::to_string() const
     auto const& pattern = impl_.get()->pattern_;
     auto const& format = impl_.get()->format_;
 #if defined(BOOST_REGEX_HAS_ICU)
-    fromUTF32toUTF8(pattern.str(), str_);
+    fromUTF32toUTF8(pattern, str_);
     str_ += "','";
     format.toUTF8String(str_);
 #else
