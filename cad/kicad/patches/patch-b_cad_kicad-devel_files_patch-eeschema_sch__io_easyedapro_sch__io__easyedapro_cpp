fix build with libc++ 19 (From FreeBSD)
As noted in the libc++ 19 release notes [1], std::char_traits<> is now
only provided for char, char8_t, char16_t, char32_t and wchar_t, and any
instantiation for other types will fail.

The first batch of errors can be fixed by providing a simple `length()`
function for the `NANODBC_SQLCHAR const*` type. The second batch can be
fixed by using `std::basic_string<char16_t>` for `utf16string`, and
adjusting the call to `std::basic_string<char16_t>::append`. The third
batch can be fixed by adding a `char_traits` definition specifically for
the `wxUniChar` type.

[1] https://libcxx.llvm.org/ReleaseNotes/19.html#deprecations-and-removals
Index: b/cad/kicad-devel/files/patch-eeschema_sch__io_easyedapro_sch__io__easyedapro.cpp
--- b/cad/kicad-devel/files/patch-eeschema_sch__io_easyedapro_sch__io__easyedapro.cpp.orig
+++ b/cad/kicad-devel/files/patch-eeschema_sch__io_easyedapro_sch__io__easyedapro.cpp
@@ -0,0 +1,34 @@
+--- eeschema/sch_io/easyedapro/sch_io_easyedapro.cpp.orig	2024-10-11 09:03:05 UTC
++++ eeschema/sch_io/easyedapro/sch_io_easyedapro.cpp
+@@ -105,6 +105,31 @@ int SCH_IO_EASYEDAPRO::GetModifyHash() const
+ }
+ 
+ 
++// Explicitly define char traits for wxUniChar since it is not standard
++template<>
++struct nlohmann::detail::char_traits<wxUniChar> : std::char_traits<char32_t>
++{
++    using char_type = wxUniChar;
++    using int_type = uint32_t;
++
++    // Redefine to_int_type function
++    static int_type to_int_type(char_type c) noexcept
++    {
++        return static_cast<int_type>(c);
++    }
++
++    static char_type to_char_type(int_type i) noexcept
++    {
++        return static_cast<char_type>(i);
++    }
++
++    static constexpr int_type eof() noexcept
++    {
++        return ~0U;
++    }
++};
++
++
+ static LIB_SYMBOL* loadSymbol( nlohmann::json project, const wxString& aLibraryPath,
+                                const wxString& aAliasName, const std::map<std::string, UTF8>* aProperties )
+ {
