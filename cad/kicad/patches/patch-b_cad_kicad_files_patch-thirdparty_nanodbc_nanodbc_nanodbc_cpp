cad/kicad: fix build with libc++ 19 (From FreeBSD)
As noted in the libc++ 19 release notes [1], std::char_traits<> is now
only provided for char, char8_t, char16_t, char32_t and wchar_t, and any
instantiation for other types will fail.

The first batch of errors can be fixed by providing a simple `length()`
function for the `NANODBC_SQLCHAR const*` type. The second batch can be
fixed by using `std::basic_string<char16_t>` for `utf16string`, and
adjusting the call to `std::basic_string<char16_t>::append`.

[1] https://libcxx.llvm.org/ReleaseNotes/19.html#deprecations-and-removals
Index: b/cad/kicad/files/patch-thirdparty_nanodbc_nanodbc_nanodbc.cpp
--- b/cad/kicad/files/patch-thirdparty_nanodbc_nanodbc_nanodbc.cpp.orig
+++ b/cad/kicad/files/patch-thirdparty_nanodbc_nanodbc_nanodbc.cpp
@@ -0,0 +1,44 @@
+--- thirdparty/nanodbc/nanodbc/nanodbc.cpp.orig	2023-04-13 20:27:39 UTC
++++ thirdparty/nanodbc/nanodbc/nanodbc.cpp
+@@ -255,10 +255,19 @@ constexpr std::size_t size(const T (&array)[N]) noexce
+ }
+ #endif
+ 
++inline std::size_t length(NANODBC_SQLCHAR const* s)
++{
++  std::size_t len = 0;
++  for (; *s != 0; ++s)
++    ++len;
++  return len;
++  
++}
++
+ template <std::size_t N>
+ inline std::size_t size(NANODBC_SQLCHAR const (&array)[N]) noexcept
+ {
+-    auto const n = std::char_traits<NANODBC_SQLCHAR>::length(array);
++    auto const n = length(array);
+     NANODBC_ASSERT(n < N);
+     return n < N ? n : N - 1;
+ }
+@@ -3573,9 +3582,9 @@ std::list<datasource> list_datasources()
+                 "incompatible SQLCHAR and string::value_type");
+ 
+             datasource dsn;
+-            dsn.name = string(&name[0], &name[std::char_traits<NANODBC_SQLCHAR>::length(name)]);
++            dsn.name = string(&name[0], &name[length(name)]);
+             dsn.driver =
+-                string(&driver[0], &driver[std::char_traits<NANODBC_SQLCHAR>::length(driver)]);
++                string(&driver[0], &driver[length(driver)]);
+ 
+             dsns.push_back(std::move(dsn));
+             direction = SQL_FETCH_NEXT;
+@@ -3626,7 +3635,7 @@ std::list<driver> list_drivers()
+                 "incompatible SQLCHAR and string::value_type");
+ 
+             driver drv;
+-            drv.name = string(&descr[0], &descr[std::char_traits<NANODBC_SQLCHAR>::length(descr)]);
++            drv.name = string(&descr[0], &descr[length(descr)]);
+ 
+             // Split "Key1=Value1\0Key2=Value2\0\0" into list of key-value pairs
+             auto beg = &attrs[0];
